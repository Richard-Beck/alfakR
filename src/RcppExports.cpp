// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_karyotype_abm
Rcpp::List run_karyotype_abm(Rcpp::List initial_population_r, Rcpp::List fitness_map_r, double p_missegregation, double dt, int n_steps, long long max_population_size, double culling_survival_fraction, int record_interval, int seed);
RcppExport SEXP _alfakR_run_karyotype_abm(SEXP initial_population_rSEXP, SEXP fitness_map_rSEXP, SEXP p_missegregationSEXP, SEXP dtSEXP, SEXP n_stepsSEXP, SEXP max_population_sizeSEXP, SEXP culling_survival_fractionSEXP, SEXP record_intervalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type initial_population_r(initial_population_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type fitness_map_r(fitness_map_rSEXP);
    Rcpp::traits::input_parameter< double >::type p_missegregation(p_missegregationSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    Rcpp::traits::input_parameter< long long >::type max_population_size(max_population_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type culling_survival_fraction(culling_survival_fractionSEXP);
    Rcpp::traits::input_parameter< int >::type record_interval(record_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(run_karyotype_abm(initial_population_r, fitness_map_r, p_missegregation, dt, n_steps, max_population_size, culling_survival_fraction, record_interval, seed));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_prepare_W_structure
Rcpp::List rcpp_prepare_W_structure(Rcpp::CharacterVector k_strings);
RcppExport SEXP _alfakR_rcpp_prepare_W_structure(SEXP k_stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type k_strings(k_stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_prepare_W_structure(k_strings));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_update_W_values
Rcpp::NumericVector rcpp_update_W_values(Rcpp::List structure, double p);
RcppExport SEXP _alfakR_rcpp_update_W_values(SEXP structureSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type structure(structureSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_update_W_values(structure, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_alfakR_run_karyotype_abm", (DL_FUNC) &_alfakR_run_karyotype_abm, 9},
    {"_alfakR_rcpp_prepare_W_structure", (DL_FUNC) &_alfakR_rcpp_prepare_W_structure, 1},
    {"_alfakR_rcpp_update_W_values", (DL_FUNC) &_alfakR_rcpp_update_W_values, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_alfakR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
