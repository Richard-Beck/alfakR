// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/alfakR.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_karyotype_abm
Rcpp::List run_karyotype_abm(Rcpp::List initial_population_r, Rcpp::List fitness_map_r, double p_missegregation, double dt, int n_steps, long long max_population_size, double culling_survival_fraction, int record_interval, int seed, Rcpp::NumericMatrix grf_centroids, double grf_lambda);
RcppExport SEXP _alfakR_run_karyotype_abm(SEXP initial_population_rSEXP, SEXP fitness_map_rSEXP, SEXP p_missegregationSEXP, SEXP dtSEXP, SEXP n_stepsSEXP, SEXP max_population_sizeSEXP, SEXP culling_survival_fractionSEXP, SEXP record_intervalSEXP, SEXP seedSEXP, SEXP grf_centroidsSEXP, SEXP grf_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type initial_population_r(initial_population_rSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type fitness_map_r(fitness_map_rSEXP);
    Rcpp::traits::input_parameter< double >::type p_missegregation(p_missegregationSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    Rcpp::traits::input_parameter< long long >::type max_population_size(max_population_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type culling_survival_fraction(culling_survival_fractionSEXP);
    Rcpp::traits::input_parameter< int >::type record_interval(record_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type grf_centroids(grf_centroidsSEXP);
    Rcpp::traits::input_parameter< double >::type grf_lambda(grf_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_karyotype_abm(initial_population_r, fitness_map_r, p_missegregation, dt, n_steps, max_population_size, culling_survival_fraction, record_interval, seed, grf_centroids, grf_lambda));
    return rcpp_result_gen;
END_RCPP
}
// pij
double pij(int i, int j, double beta);
static SEXP _alfakR_pij_try(SEXP iSEXP, SEXP jSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(pij(i, j, beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alfakR_pij(SEXP iSEXP, SEXP jSEXP, SEXP betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alfakR_pij_try(iSEXP, jSEXP, betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// s2v
IntegerVector s2v(SEXP s);
static SEXP _alfakR_s2v_try(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s2v(s));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alfakR_s2v(SEXP sSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alfakR_s2v_try(sSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_A_inputs
List get_A_inputs(CharacterVector k_str, double beta, Nullable<double> Nmax_);
static SEXP _alfakR_get_A_inputs_try(SEXP k_strSEXP, SEXP betaSEXP, SEXP Nmax_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type k_str(k_strSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type Nmax_(Nmax_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_inputs(k_str, beta, Nmax_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alfakR_get_A_inputs(SEXP k_strSEXP, SEXP betaSEXP, SEXP Nmax_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alfakR_get_A_inputs_try(k_strSEXP, betaSEXP, Nmax_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// chrmod_cpp
List chrmod_cpp(double time, NumericVector state, List parms);
static SEXP _alfakR_chrmod_cpp_try(SEXP timeSEXP, SEXP stateSEXP, SEXP parmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type parms(parmsSEXP);
    rcpp_result_gen = Rcpp::wrap(chrmod_cpp(time, state, parms));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alfakR_chrmod_cpp(SEXP timeSEXP, SEXP stateSEXP, SEXP parmsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alfakR_chrmod_cpp_try(timeSEXP, stateSEXP, parmsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// chrmod_rel_cpp
List chrmod_rel_cpp(double time, NumericVector x, List parms);
static SEXP _alfakR_chrmod_rel_cpp_try(SEXP timeSEXP, SEXP xSEXP, SEXP parmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type parms(parmsSEXP);
    rcpp_result_gen = Rcpp::wrap(chrmod_rel_cpp(time, x, parms));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alfakR_chrmod_rel_cpp(SEXP timeSEXP, SEXP xSEXP, SEXP parmsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alfakR_chrmod_rel_cpp_try(timeSEXP, xSEXP, parmsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _alfakR_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*pij)(int,int,double)");
        signatures.insert("IntegerVector(*s2v)(SEXP)");
        signatures.insert("List(*get_A_inputs)(CharacterVector,double,Nullable<double>)");
        signatures.insert("List(*chrmod_cpp)(double,NumericVector,List)");
        signatures.insert("List(*chrmod_rel_cpp)(double,NumericVector,List)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _alfakR_RcppExport_registerCCallable() { 
    R_RegisterCCallable("alfakR", "_alfakR_pij", (DL_FUNC)_alfakR_pij_try);
    R_RegisterCCallable("alfakR", "_alfakR_s2v", (DL_FUNC)_alfakR_s2v_try);
    R_RegisterCCallable("alfakR", "_alfakR_get_A_inputs", (DL_FUNC)_alfakR_get_A_inputs_try);
    R_RegisterCCallable("alfakR", "_alfakR_chrmod_cpp", (DL_FUNC)_alfakR_chrmod_cpp_try);
    R_RegisterCCallable("alfakR", "_alfakR_chrmod_rel_cpp", (DL_FUNC)_alfakR_chrmod_rel_cpp_try);
    R_RegisterCCallable("alfakR", "_alfakR_RcppExport_validate", (DL_FUNC)_alfakR_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_alfakR_run_karyotype_abm", (DL_FUNC) &_alfakR_run_karyotype_abm, 11},
    {"_alfakR_pij", (DL_FUNC) &_alfakR_pij, 3},
    {"_alfakR_s2v", (DL_FUNC) &_alfakR_s2v, 1},
    {"_alfakR_get_A_inputs", (DL_FUNC) &_alfakR_get_A_inputs, 3},
    {"_alfakR_chrmod_cpp", (DL_FUNC) &_alfakR_chrmod_cpp, 3},
    {"_alfakR_chrmod_rel_cpp", (DL_FUNC) &_alfakR_chrmod_rel_cpp, 3},
    {"_alfakR_RcppExport_registerCCallable", (DL_FUNC) &_alfakR_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_alfakR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
