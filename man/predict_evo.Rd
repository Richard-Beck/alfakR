% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prediction_functions.R
\name{predict_evo}
\alias{predict_evo}
\title{Predict Karyotype Evolution using ODE or ABM}
\usage{
predict_evo(
  lscape,
  p,
  times,
  x0,
  prediction_type = "ODE",
  ode_method = "lsoda",
  Nmax = Inf,
  abm_pop_size = 10000,
  abm_delta_t = 0.1,
  abm_max_pop = 1e+07,
  abm_culling_survival = 0.1,
  abm_record_interval = 10,
  abm_seed = -1
)
}
\arguments{
\item{lscape}{data.frame. Must contain columns 'k' (character, karyotype string,
e.g., "2.2.1...") and 'mean' (numeric, fitness r_k). All karyotype strings
must represent karyotypes with the same number of chromosome types.}

\item{p}{numeric. Probability of single chromosome missegregation per division (0 <= p <= 1).}

\item{times}{numeric vector. Time points at which to report frequencies. Must be sorted ascending and non-empty.}

\item{x0}{numeric vector. Initial frequencies of karyotypes. Must be named with
karyotype strings matching all unique karyotypes present in \code{lscape$k}.
The vector will be reordered to match \code{lscape$k} if names are a setequal match. Must sum to 1.}

\item{prediction_type}{character. Either "ODE" or "ABM". Default is "ODE".}

\item{ode_method}{character. Method for \code{deSolve::ode} (e.g., "lsoda", "lsodes").
Used only if \code{prediction_type} is "ODE". Default is "lsoda".}

\item{Nmax}{Optional limit to the number of missegregations allowable (ODE model only).}

\item{abm_pop_size}{integer. Initial total population size for ABM.
Used only if \code{prediction_type} is "ABM". Default is 1e4.}

\item{abm_delta_t}{numeric. Duration of one time step in ABM.
Used only if \code{prediction_type} is "ABM". Default is 0.1.}

\item{abm_max_pop}{numeric. Carrying capacity for ABM (values <= 0 typically mean unlimited population growth,
as handled by the C++ function). Used only if \code{prediction_type} is "ABM". Default is 1e7.}

\item{abm_culling_survival}{numeric. Fraction of population surviving when \code{abm_max_pop}
is exceeded (0 <= x <= 1). Used only if \code{prediction_type} is "ABM". Default is 0.1.}

\item{abm_record_interval}{integer. Record ABM state every N steps.
Used only if \code{prediction_type} is "ABM". Default is 10.}

\item{abm_seed}{integer. Seed for ABM's random number generator (-1 for a random seed based on device,
any other integer for a fixed seed). Used only if \code{prediction_type} is "ABM". Default is -1.}
}
\value{
A data.frame with the first column 'time' and subsequent columns named by
karyotype strings from \code{lscape$k}, containing their frequencies at the requested \code{times} (for ODE)
or at recorded ABM steps that cover the requested time range.
}
\description{
Master function to run karyotype evolution simulations. Assumes Rcpp functions
are compiled and available from the package.
}
\examples{
\dontrun{
# This example requires the C++ functions to be compiled and available
# within the alfakR package.

# 1. Define a landscape (fitness for different karyotypes)
# Ensuring all karyotype strings have the same number of elements.
landscape_df <- data.frame(
  k = c("2.2", "3.1", "1.3"), # Example for 2 chromosome types
  mean = c(0.1, 0.12, 0.08)  # Fitness values (r_k)
)

# 2. Define initial frequencies
initial_freq <- c(0.9, 0.05, 0.05)
names(initial_freq) <- landscape_df$k # Ensure names match

# 3. Define simulation parameters
prob_missegregation <- 0.001
simulation_times <- seq(0, 50, by = 1)

# Ensure alfakR is loaded (e.g. after devtools::load_all() or library(alfakR))
# If running this example outside of a context where alfakR is loaded,
# the C++ functions (run_karyotype_abm etc.) will not be found.


ode_results <- predict_evo(lscape = landscape_df,
                           p = prob_missegregation,
                           times = simulation_times,
                           x0 = initial_freq,
                           prediction_type = "ODE")
print(head(ode_results))
abm_results <- predict_evo(lscape = landscape_df,
                           p = prob_missegregation,
                           times = simulation_times,
                           x0 = initial_freq,
                           prediction_type = "ABM",
                           abm_pop_size = 1000, # Smaller for quick example
                           abm_delta_t = 0.1,
                           abm_max_pop = 10000,
                           abm_record_interval = 10)
print(head(abm_results))
}
}
