// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_alfakR_RCPPEXPORTS_H_GEN_
#define RCPP_alfakR_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace alfakR {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("alfakR", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("alfakR", "_alfakR_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in alfakR");
            }
        }
    }

    inline double pij(int i, int j, double beta) {
        typedef SEXP(*Ptr_pij)(SEXP,SEXP,SEXP);
        static Ptr_pij p_pij = NULL;
        if (p_pij == NULL) {
            validateSignature("double(*pij)(int,int,double)");
            p_pij = (Ptr_pij)R_GetCCallable("alfakR", "_alfakR_pij");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pij(Shield<SEXP>(Rcpp::wrap(i)), Shield<SEXP>(Rcpp::wrap(j)), Shield<SEXP>(Rcpp::wrap(beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline IntegerVector s2v(SEXP s) {
        typedef SEXP(*Ptr_s2v)(SEXP);
        static Ptr_s2v p_s2v = NULL;
        if (p_s2v == NULL) {
            validateSignature("IntegerVector(*s2v)(SEXP)");
            p_s2v = (Ptr_s2v)R_GetCCallable("alfakR", "_alfakR_s2v");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_s2v(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline List get_A_inputs(CharacterVector k_str, double beta, Nullable<double> Nmax_ = R_NilValue) {
        typedef SEXP(*Ptr_get_A_inputs)(SEXP,SEXP,SEXP);
        static Ptr_get_A_inputs p_get_A_inputs = NULL;
        if (p_get_A_inputs == NULL) {
            validateSignature("List(*get_A_inputs)(CharacterVector,double,Nullable<double>)");
            p_get_A_inputs = (Ptr_get_A_inputs)R_GetCCallable("alfakR", "_alfakR_get_A_inputs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_A_inputs(Shield<SEXP>(Rcpp::wrap(k_str)), Shield<SEXP>(Rcpp::wrap(beta)), Shield<SEXP>(Rcpp::wrap(Nmax_)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List chrmod_cpp(double time, NumericVector state, List parms) {
        typedef SEXP(*Ptr_chrmod_cpp)(SEXP,SEXP,SEXP);
        static Ptr_chrmod_cpp p_chrmod_cpp = NULL;
        if (p_chrmod_cpp == NULL) {
            validateSignature("List(*chrmod_cpp)(double,NumericVector,List)");
            p_chrmod_cpp = (Ptr_chrmod_cpp)R_GetCCallable("alfakR", "_alfakR_chrmod_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_chrmod_cpp(Shield<SEXP>(Rcpp::wrap(time)), Shield<SEXP>(Rcpp::wrap(state)), Shield<SEXP>(Rcpp::wrap(parms)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List chrmod_rel_cpp(double time, NumericVector x, List parms) {
        typedef SEXP(*Ptr_chrmod_rel_cpp)(SEXP,SEXP,SEXP);
        static Ptr_chrmod_rel_cpp p_chrmod_rel_cpp = NULL;
        if (p_chrmod_rel_cpp == NULL) {
            validateSignature("List(*chrmod_rel_cpp)(double,NumericVector,List)");
            p_chrmod_rel_cpp = (Ptr_chrmod_rel_cpp)R_GetCCallable("alfakR", "_alfakR_chrmod_rel_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_chrmod_rel_cpp(Shield<SEXP>(Rcpp::wrap(time)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(parms)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_alfakR_RCPPEXPORTS_H_GEN_
